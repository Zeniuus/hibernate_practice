package kr.co.vcnc.swan.study.hibernate.practice

import kr.co.vcnc.swan.study.hibernate.practice.model.LazyEntity
import kr.co.vcnc.swan.study.hibernate.practice.model.SimpleEntity
import org.hibernate.CacheMode
import org.hibernate.Session
import org.hibernate.SessionFactory
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import javax.persistence.PersistenceException

class PersistenceContextSimple : AbstractHibernateTest() {
    @Before
    fun cleanUp() {
        doInJPA { em ->
            listOf(1L, 2L, 3L).forEach { id ->
                try {
                    em.remove(em.find(SimpleEntity::class.java, id))
                } catch (e: Exception) {
                }
            }
            try {
                em.remove(em.find(LazyEntity::class.java, 1L))
            } catch (e: Exception) {

            }
            em.flush()
        }
    }

    @Test
    fun `test 5_2 - Lazy attribute loading`() {
        doInJPA { em ->
            val lazyEntity = LazyEntity(
                id = 1L,
                group1Field1 = "group 1 field 1",
                group1Field2 = "group 1 field 2",
                group2Field1 = "group 2 field 1",
                group2Field2 = "group 2 field 2"
            )
            em.persist(lazyEntity)
        }
        doInJPA { em ->
            val lazyEntity = em.find(LazyEntity::class.java, 1L)
            println(lazyEntity.group1Field1)
            println(lazyEntity.group1Field2)
            println(lazyEntity.group2Field1)
            println(lazyEntity.group2Field2)
        }
    }

    @Test(expected = PersistenceException::class)
    fun `test 5_3 - Persisting entity with non-autogenerated and empty id`() {
        doInJPA { em ->
            val entity = SimpleEntity(id = 1L)
            em.persist(entity)
        }

        doInJPA { em ->
            val entity = SimpleEntity(id = null)
            em.persist(entity)
        }
    }

    @Test(expected = IllegalArgumentException::class)
    fun `test 5_4 - Deleting detached entity with remove()`() {
        doInJPA { em ->
            val entity = SimpleEntity(id = 1L)
            em.persist(entity)
        }

        doInJPA { em ->
            val entity = em.find(SimpleEntity::class.java, 1L)
            em.detach(entity)
            em.remove(entity)
        }
    }

    @Test
    fun `test 5_4 - Deleting detached entity with delete()`() {
        doInJPA { em ->
            val entity = SimpleEntity(id = 1L)
            em.persist(entity)
        }

        doInJPA { em ->
//            val entity = em.find(SimpleEntity::class.java, 1L)
//            em.detach(entity)
            val entity = SimpleEntity(id = 1L)
            val session = em.unwrap(Session::class.java)
            session.delete(entity)
        }
    }

    @Test
    fun `test 5_7(example 310) - Loading multiple entities using the byMultipleIds() Hibernate API`() {
        doInJPA { em ->
            repeat(3) { index ->
                val id = (index + 1).toLong()
                val entity = SimpleEntity(id = id)
                em.persist(entity)
            }
        }
        doInJPA { em ->
            val session = em.unwrap(Session::class.java)
            val entities = session
                .byMultipleIds(SimpleEntity::class.java)
                .multiLoad(listOf(1L, 2L, 3L))

            val sameEntities = session
                .byMultipleIds(SimpleEntity::class.java)
                .enableSessionCheck(true) // select query를 날리지 않는다.
                .multiLoad(listOf(1L, 2L, 3L))
            Assert.assertEquals(entities, sameEntities)
        }
    }

//    @Test
//    fun `test 5_7(example 311) - Loading multiple entities from second-level cache`() {
//        doInJPA { em ->
//            repeat(3) { index ->
//                val id = (index + 1).toLong()
//                val entity = SimpleEntity(id = id)
//                em.persist(entity)
//            }
//        }
//
//        val sessionFactory = entityManagerFactory.unwrap(SessionFactory::class.java)
//        val statistics = sessionFactory.statistics
//        sessionFactory.cache.evictAll()
//        statistics.clear()
//        Assert.assertEquals(0, statistics.queryExecutionCount)
//
//        doInJPA { em ->
//            val session = em.unwrap(Session::class.java)
//            val entities = session
//                .byMultipleIds(SimpleEntity::class.java)
//                .multiLoad(listOf(1L, 2L, 3L))
//            Assert.assertEquals(3, entities.size)
//        }
//        Assert.assertEquals(0, statistics.secondLevelCacheHitCount)
//        Assert.assertEquals(3, statistics.secondLevelCachePutCount)
////        Assert.assertEquals(1, sqlStatementInterceptor.getSqlQueries().size())
//
//        doInJPA { em ->
//            val session = em.unwrap(Session::class.java)
//            val entities = session
//                .byMultipleIds(SimpleEntity::class.java)
//                .with(CacheMode.NORMAL)
//                .multiLoad(listOf(1L, 2L, 3L))
//            Assert.assertEquals(3, entities.size)
//        }
//        Assert.assertEquals(3, statistics.secondLevelCacheHitCount)
////        Assert.assertEquals(0, sqlStatementInterceptor.getSqlQueries().size())
//    }
}